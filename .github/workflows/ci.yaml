name: CI

on:
  push:
    branches:
      - debug-sops
  pull_request:
    branches:
      - debug-sops
  schedule:
    - cron:  '0 17 * * *'

jobs:
  shell-ci:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: Lint shell scripts, ignoring third-party files
      run: |
        find . -name "*.sh" > shell_files.out
        shellcheck $(cat shell_files.out)

  node-ci:
    strategy:
      matrix:
        platform: [ubuntu-latest]
        node-version: [12.x]
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install and test NPM packages
      run: |
        cd functions/ts
        npm ci
        npm test
    - name: Check licenses
      run: |
        cd functions/ts
        npm run lint-license

  e2e-ci:
    needs: [node-ci]
    strategy:
      matrix:
        platform: [ubuntu-latest]
        node-version: [12.x]
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install NPM packages
      run: |
        cd functions/ts
        npm ci
    - name: Build node docker images
      if: matrix.platform == 'ubuntu-latest'
      run: |
        cd functions/ts
        npm run kpt:docker-build
    - name: Build go images
      if: matrix.platform == 'ubuntu-latest'
      run: |
        cd functions/go
        BUILDONLY=true TAG=dev ./publish-functions.sh
    - name: Run all e2e tests
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo curl https://storage.googleapis.com/kpt-dev/latest/linux_amd64/kpt -o /usr/local/bin/kpt
        sudo chmod +x /usr/local/bin/kpt
        echo "testcase: kpt_sops"
        REPODIR=$(pwd)
        tmp=$(mktemp -d "/tmp/e2e.kpt_sops.XXXXXXXX")
        cd "${tmp}"
        cp -r "$REPODIR"/examples/sops .
        sed -i 's|gcr.io/kpt-functions/sops|gcr.io/kpt-functions/sops:dev|' sops/local-configs/function.yaml
        curl -fsSL -o key.asc https://raw.githubusercontent.com/mozilla/sops/master/pgp/sops_functional_tests_key.asc
        SOPS_IMPORT_PGP="$(cat key.asc)" kpt fn run sops/local-configs
        cat sops/local-configs/to-decrypt.yaml
        cat sops/local-configs/to-encrypt.yaml
